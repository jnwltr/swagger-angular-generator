{
  "swagger": "2.0",
  "info": {
    "title": "Test Swagger",
    "version": "v1"
  },
  "host": "example.com",
  "basePath": "/api-base-path",
  "schemes": [
    "http"
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "operationId": "Products",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringField",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "BooleanField",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "int32Field",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "longField",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "floatField",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "float"
          },
          {
            "name": "doubleField",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "double"
          },
          {
            "name": "byteField",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "binaryField",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "binary"
          },
          {
            "name": "dateField",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "dateTimeField",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/products"
            }
          }
        }
      }
    },
    "/product-detail/{productId}": {
      "get": {
        "tags": [
          "ProductDetail"
        ],
        "summary": "Get product detail",
        "operationId": "ProductDetail",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productDetail"
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "create order",
        "operationId": "Order",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "orderDto",
            "description": "order",
            "required": false,
            "schema": {
              "$ref": "#/definitions/orderDto"
            }
          },
          {
            "name": "producer",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/order/{orderId}": {
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Patches order",
        "operationId": "PatchOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "producer",
            "in": "body",
            "description": "producer",
            "required": false,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "description": "model",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Put for order",
        "operationId": "Put-Order",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "producer",
            "in": "body",
            "description": "car producer",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "body",
            "description": "car model",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerName",
            "in": "body",
            "description": "customer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete order",
        "operationId": "deleteORDER",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "create registration credentials",
        "operationId": "Registration",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "loginDto",
            "description": "login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/registration/{registrationType}": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "create registration credentials",
        "operationId": "Registration",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "E-mail",
            "required": true,
            "type": "string",
            "format": "email"
          },
          {
            "name": "password1",
            "in": "formData",
            "description": "Password 1",
            "required": true,
            "type": "string"
          },
          {
            "name": "password2",
            "in": "formData",
            "description": "Password 2",
            "required": true,
            "type": "string"
          },
          {
            "name": "selfRefParam",
            "in": "formData",
            "description": "Self ref parameter",
            "required": true,
            "schema": {
              "$ref": "#/definitions/selfRefObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "registrationType",
          "in": "path",
          "description": "Registration type",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/logout": {
      "post": {
        "tags": [
          "Logout"
        ],
        "summary": "Logout - empty post body",
        "operationId": "Logout",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/career/v{version}/positions/{positionId}": {
      "get": {
        "tags": [
          "Career"
        ],
        "summary": "get career",
        "operationId": "Career",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "description": "Position Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "path",
            "description": "API version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/rest-auth/logout/": {
      "get": {
        "operationId": "rest-auth_logout_list",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rest-auth"
        ]
      },
      "post": {
        "operationId": "rest-auth_logout_create",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rest-auth"
        ]
      }
    },
    "/rest-auth/user/": {
      "get": {
        "operationId": "rest-auth_user_read",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rest-auth"
        ]
      },
      "put": {
        "operationId": "rest-auth_user_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rest-auth"
        ]
      },
      "patch": {
        "operationId": "rest-auth_user_partial_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserDetails"
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rest-auth"
        ]
      }
    },
    "/goods/get-goods-list/": {
      "get": {
        "operationId": "goods_get-goods-list_list",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial index from which to return the results.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri"
                },
                "previous": {
                  "type": "string",
                  "format": "uri"
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Goods"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "goods"
        ]
      },
      "parameters": []
    },
    "/structures/array": {
      "post": {
        "tags": [
          "Structures"
        ],
        "operationId": "structures_array",
        "description": "structural test for arrays and arrays of arrays",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "arraySection",
            "in": "body",
            "description": "array structures",
            "required": true,
            "schema": {
              "$ref": "#/definitions/arrayStructure"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "required": [
                "status"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/structures/map": {
      "post": {
        "tags": [
          "Structures"
        ],
        "operationId": "structures_map",
        "description": "structural test for maps",
        "parameters": [
          {
            "name": "mapSection",
            "in": "body",
            "description": "map structures",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mapStructure"
            }
          }
        ],
        "responses": {
          "200": {}
        }
      }
    },
    "/params/normal/{pathParam}/dashed/{dashed-path-param}": {
      "post": {
        "tags": [
          "Params"
        ],
        "operationId": "params_test",
        "description": "Test of param handling",
        "parameters": [
          {
            "name": "pathParam",
            "in": "path",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "queryParam",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "queryParamCollectionDefault",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "queryParamCollectionCsv",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "queryParamCollectionSsv",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "array",
            "items": {
              "type": "number"
            },
            "collectionFormat": "ssv"
          },
          {
            "name": "queryParamCollectionMulti",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "array",
            "items": {
              "type": "number"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "headerParam",
            "in": "header",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "bodyParam",
            "in": "body",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "dashed-path-param",
            "in": "path",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "dashed-query-param",
            "in": "query",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "dashed-query-param-collection-tsv",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "tsv"
          },
          {
            "name": "dashed-query-param-collection-pipes",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "number"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "dashed-query-param-collection-multi",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dashed-header-param",
            "in": "header",
            "description": "testing number",
            "required": true,
            "type": "integer"
          },
          {
            "name": "dashed-body-param",
            "in": "body",
            "description": "testing number",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {}
        }
      }
    },
    "/ticketing/show-ticket-detail/{id}/": {
      "get": {
        "operationId": "ticketing_show-ticket-detail_read",
        "description": "show_ticket_detail",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TicketDetailOutput"
              }
            }
          }
        },
        "tags": [
          "ticketing"
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    }
  },
  "definitions": {
    "products": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "partnerId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "format": "string",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "productDetail": {
      "type": "object",
      "properties": {
        "partnerId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "format": "string",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "orderDto": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "selfRefObject": {
      "type": "object",
      "properties": {
        "prop1": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/selfRefObject"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/selfRefObject"
          }
        }
      }
    },
    "loginDto": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserDetails": {
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "pk": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "string",
          "pattern": "^[\\w.@+-]+$",
          "maxLength": 150
        },
        "email": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "readOnly": true
        },
        "first_name": {
          "title": "First name",
          "type": "string",
          "maxLength": 30
        },
        "last_name": {
          "title": "Last name",
          "type": "string",
          "maxLength": 150
        }
      }
    },
    "Goods": {
      "required": [
        "price",
        "currency"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 250
        },
        "photo_url": {
          "title": "Photo",
          "type": "string",
          "format": "uri",
          "maxLength": 250
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250
        },
        "price": {
          "title": "Price",
          "type": "string",
          "format": "decimal"
        },
        "currency": {
          "title": "Currency",
          "type": "string",
          "enum": [
            "CZK"
          ]
        },
        "status": {
          "title": "Status",
          "type": "integer",
          "enum": [
            1, 2, 3
          ]
        },
        "refStatus": {
          "$ref": "#/definitions/RefStatus",
          "enum": [
            1, 2, 3
          ]
        }
      }
    },
    "arrayStructure": {
      "type": "object",
      "required": [
        "arrayObjectRef",
        "arrayStringInline",
        "arrayArrayStringsRef",
        "arrayArrayObjectRef",
        "nestedArray",
        "nestedRefsArray"
      ],
      "properties": {
        "arrayObjectRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderDto"
          }
        },
        "arrayStringInline": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "arrayArrayStringsRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArrayOfStrings"
          }
        },
        "arrayArrayObjectRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArrayOfObjects"
          }
        },
        "nestedArray": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "nestedRefsArray": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ArrayOfObjects"
            }
          }
        }
      },
      "description": "Array testing structure"
    },
    "ArrayOfStrings": {
      "type": "array",
      "description": "Array of strings",
      "items": {
        "type": "string"
      }
    },
    "ArrayOfObjects": {
      "type": "array",
      "description": "Array of objects",
      "items": {
        "$ref": "#/definitions/orderDto"
      }
    },
    "mapStructure": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/mapContent"
      }
    },
    "mapContent": {
      "type": "object",
      "required": [],
      "properties": {
        "control": {
          "type": "number"
        },
        "group": {
          "$ref": "#/definitions/orderDto"
        },
        "arrayOfObjects": {
          "$ref": "#/definitions/ArrayOfObjects"
        },
        "mapRef": {
          "$ref": "#/definitions/mapObject"
        },
        "mapInlinePrimitive": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "mapInlineRef": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/orderDto"
          }
        },
        "arrayOfMaps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mapObject"
          }
        }
      }
    },
    "mapObject": {
      "type": "object",
      "additionalProperties": {
        "type": "number"
      }
    },
    "TicketDetailOutput": {
      "required": [
        "status",
        "created_date",
        "created_by_user",
        "issue__origin"
      ],
      "type": "object",
      "properties": {
        "status": {
          "title": "Status",
          "type": "string",
          "minLength": 1
        },
        "created_date": {
          "title": "Created date",
          "type": "string",
          "format": "date-time"
        },
        "created_by_user": {
          "title": "Created by user",
          "type": "boolean"
        },
        "issue__origin": {
          "title": "Issue  origin",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RefStatus": {
      "format": "int32",
      "type": "integer"
    }
  }
}
